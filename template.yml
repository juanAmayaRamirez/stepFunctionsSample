AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sfn-apigw-example

  Sample SAM Template for sfn-apigw-example

Parameters: 
  Stage:
    Type: String
    AllowedValues:
      - sandbox
      - dev
      - qa
      - demo
      - prod
  ProjectName:
    Type: String


Resources:
  #log group to log events in Express StateMachine
  LogGroupStateMachine: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  # statemachine role
  IAMRoleStateMachine:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BURoleForStateMachine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: BUPolicyForStateMachineLambdaExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 
                  - !GetAtt LambdacalculateTotal.Arn
                  - !GetAtt LambdacheckInventory.Arn
  # lambdas role
  IAMRoleLambdas:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BURoleForLambdasStateMachine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BUPolicyForLambdasReadDynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                Resource: 
                  - !GetAtt DynamoDBInventory.Arn
                  - !Join 
                    - ''
                    - - !GetAtt DynamoDBInventory.Arn
                      - /index/*
                  - !GetAtt DynamoDBUsers.Arn
                  - !Join 
                    - ''
                    - - !GetAtt DynamoDBUsers.Arn
                      - /index/*
        
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Type: EXPRESS
      Role: !GetAtt IAMRoleStateMachine.Arn
      DefinitionUri: statemachine/definition.json
      DefinitionSubstitutions:
        LambdacheckInventory: !GetAtt LambdacheckInventory.Arn
        LambdacalculateTotal: !GetAtt LambdacalculateTotal.Arn
      Logging:
        # Loggroup destination logs
          Destinations: 
            - CloudWatchLogsLogGroup: 
                  LogGroupArn: !GetAtt LogGroupStateMachine.Arn
          IncludeExecutionData: true
          Level: ALL

  LambdacheckInventory:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/checkInventoryFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdacalculateTotal:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/calculateTotalFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  DynamoDBInventory:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: bookid
        Type: String
      TableName: bookTable
  
  DynamoDBUsers:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: userid
        Type: String
      TableName: userTable


# Outputs:
#   # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
#   # Find out more about other implicit resources you can reference within SAM
#   # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
#   StockTradingStateMachineArn:
#     Description: "Stock Trading state machine ARN"
#     Value: !Ref StockTradingStateMachine
#   StockTradingStateMachineRole:
#     Description: "IAM Role created for Stock Trading state machine based on the specified SAM Policy Templates"
#     Value: !GetAtt StockTradingStateMachineRole.Arn
#   WebEndpoint:
#     Description: "API Gateway endpoint URL for Prod stage"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"