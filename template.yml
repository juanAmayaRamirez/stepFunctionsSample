AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sfn-apigw-example

  Sample SAM Template for sfn-apigw-example

Parameters: 
  Stage:
    Type: String
    AllowedValues:
      - sandbox
      - dev
      - qa
      - demo
      - prod
  ProjectName:
    Type: String


Resources:
  #log group to log events in Express StateMachine
  LogGroupStateMachine: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  
  # Statemachine IAM Role
  IAMRoleStateMachine:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BURoleForStateMachine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: BUPolicyForStateMachineLambdaExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 
                  - !GetAtt LambdacalculateTotal.Arn
                  - !GetAtt LambdacheckInventory.Arn
                  - !GetAtt LambdaPrepareOrder.Arn
                  - !GetAtt LambdaBillCustomer.Arn
                  - !GetAtt LambdaRedeemPoints.Arn
                  - !GetAtt LambdaRestoreRedeemPoints.Arn
              # - Effect: Allow
              #   Action: sns:*
              #   Resource: !GetAtt SNSTopic.TopicArn
              - Effect: Allow
                Action: sqs:*
                Resource: '*'
  
  # Lambdas IAM Role
  IAMRoleLambdas:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BURoleForLambdasStateMachine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BUPolicyForLambdasReadDynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateItem
                Resource: 
                  - !GetAtt DynamoDBInventory.Arn
                  - !Join 
                    - ''
                    - - !GetAtt DynamoDBInventory.Arn
                      - /index/*
                  - !GetAtt DynamoDBUsers.Arn
                  - !Join 
                    - ''
                    - - !GetAtt DynamoDBUsers.Arn
                      - /index/*
              - Effect: Allow
                Action: states:*
                Resource: '*'
              - Effect: Allow
                Action: sqs:*
                Resource: '*'
  
  # apigateway IAM Role
  IAMRoleAPIGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: BUPolicyForApiGateway
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartSyncExecution
                Resource: !Ref StockTradingStateMachine

  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Type: EXPRESS
      Role: !GetAtt IAMRoleStateMachine.Arn
      DefinitionUri: statemachine/definition.json
      DefinitionSubstitutions:
        LambdacheckInventory: !GetAtt LambdacheckInventory.Arn
        LambdacalculateTotal: !GetAtt LambdacalculateTotal.Arn
        LambdaPrepareOrder: !GetAtt LambdaPrepareOrder.Arn
        LambdaBillCustomer: !GetAtt LambdaBillCustomer.Arn
        LambdaRedeemPoints: !GetAtt LambdaRedeemPoints.Arn
        LambdaRestoreRedeemPoints: !GetAtt LambdaRestoreRedeemPoints.Arn
        SQSQueueURL: !GetAtt SQSQueue.QueueUrl
        LambdaRestoreQuantity: !GetAtt LambdaRestoreQuantity.Arn
        # SNSTopic: !GetAtt SNSTopic.TopicArn
      Logging:
        # Loggroup destination logs
          Destinations: 
            - CloudWatchLogsLogGroup: 
                  LogGroupArn: !GetAtt LogGroupStateMachine.Arn
          IncludeExecutionData: true
          Level: ALL

  LambdacheckInventory:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/checkInventoryFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn
  
  LambdaPrepareOrder:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/prepareOrderFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdaBillCustomer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/billCustomerFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdaRedeemPoints:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/redeemPointsFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn
  
  LambdaRestoreRedeemPoints:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/restoreRedeemPointsFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdacalculateTotal:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/calculateTotalFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdaRestoreQuantity:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/restoreQuantityFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn

  LambdaSqsWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sqsWorkerFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleLambdas.Arn
      Events:
        sqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 1

  # SNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #       - Endpoint: someManageremail@email.com
  #         Protocol: Email

  DynamoDBInventory:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: bookid
        Type: String
      TableName: bookTable
  
  DynamoDBUsers:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: userid
        Type: String
      TableName: userTable

  SQSQueue:
    Type: AWS::SQS::Queue

## The following are the resources for the apigateway direct integration with stepfunctions
  APIGatewayRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub Apigateway-${ProjectName}
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: book
    DependsOn:
      - APIGatewayRestAPI

  APIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGatewayRestAPI
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Error
      Integration:
        Type: AWS
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartSyncExecution
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMRoleAPIGateway.Arn
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            !Sub
              - |
                #set($body= $input.json('$'))
                #set($inputRoot='{ "data" :'+$body+',"apiInfo":{"httpMethod" :"'+ $context.httpMethod+'", "apiKey":"'+ $context.identity.apiKey+'"}}')
                #set($apiData=$util.escapeJavaScript($inputRoot))
                #set($apiData=$apiData.replaceAll("\\'","'"))
                {
                  "input" :"$apiData",
                  "stateMachineArn": "${STEPFUNCTION_ARN}"  
                }
              - STEPFUNCTION_ARN: !Ref StockTradingStateMachine
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 2\d{2}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: |
                #set ($bodyObj = $util.parseJson($input.body))
                #if ($bodyObj.status == "SUCCEEDED")
                    $bodyObj.output
                #elseif ($bodyObj.status == "FAILED")
                    #set($context.responseOverride.status = 500)
                    {
                        "cause": "$bodyObj.cause",
                        "error": "$bodyObj.error"
                    }
                #else
                    #set($context.responseOverride.status = 500)
                    $input.body
                #end
        #   - StatusCode: 400
        #     SelectionPattern: 4\d{2}
    DependsOn:
      - APIGatewayResource

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName: !Ref Stage
    DependsOn:
      - APIGatewayMethod